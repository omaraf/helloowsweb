from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import authentication, permissions
from reservar.models import Sala
from pagos.models import Pago
from accounts.models import MyProfile
from rest_framework import status
from serializers import SalaSerializer
import datetime
from django.db.models import Q
from django.core.exceptions import MultipleObjectsReturned
from dateutil.relativedelta import relativedelta
from django.http import HttpResponseBadRequest
from reservar.forms import Salaform
from django.contrib.auth.decorators import login_required
from rest_framework.response import Response
from rest_framework.renderers import JSONRenderer
from rest_framework.parsers import JSONParser
from django.http import HttpResponse
from django.shortcuts import render,redirect
from django.contrib.sites.models import get_current_site

class reservar_sala(APIView):

    authentication_classes = (authentication.SessionAuthentication,authentication.TokenAuthentication,)
    permission_classes = (permissions.IsAuthenticated,)

    def post( self, request,format=None):
        data = request.DATA.copy()
        data['user'] = request.user.id
        if not data.get('fecha') or not data.get('hora_inicio') or not data.get('hora_fin'):
            return Response("{'Error':'Missing Data'}",status=status.HTTP_409_CONFLICT)

        data['fecha_inicio'] = data['fecha']+' '+data['hora_inicio']
        data['fecha_fin'] = data['fecha']+' '+data['hora_fin']

        #Overlap Check
        fecha_inicio_res = datetime.datetime.strptime( data['fecha_inicio'],'%Y-%m-%d %H:%M')
        fecha_fin_res = datetime.datetime.strptime( data['fecha_fin'],'%Y-%m-%d %H:%M' )

        now = datetime.datetime.now()
        if now > fecha_inicio_res:
            return Response("Fecha inicio es menor que Hoy",status=status.HTTP_409_CONFLICT)
        

        if fecha_inicio_res >= fecha_fin_res:
            return Response("{'error':'check times'}",status=status.HTTP_409_CONFLICT)

        overlap_check = Sala.objects.filter( Q(user_id=data['user']) , Q(fecha_inicio__range=[fecha_inicio_res,fecha_fin_res]) | Q(fecha_inicio__lte=fecha_inicio_res,fecha_fin__gte=fecha_inicio_res) )

        if overlap_check:
            #for over_check in overlap_check:
            #    print over_check.fecha_inicio
            #    print over_check.fecha_fin
            return Response("{'overlap':'true'}",status=status.HTTP_409_CONFLICT)

        if not request.user.is_superuser:
            try:
                hours = MyProfile.objects.get(user_id=data['user'])
            except MyProfile.DoesNotExist:
                return Response("{'Error':'No Profile'}",status=status.HTTP_409_CONFLICT)

            total_hours = datetime.timedelta(hours = hours.horas_sala)

            fecha_sala = datetime.date( year=fecha_inicio_res.year, month=fecha_inicio_res.month, day=fecha_inicio_res.day)

            try:
                pago = Pago.objects.get( fecha_pago__lte=fecha_sala , fecha_expiracion__gte=fecha_sala)
            except Pago.DoesNotExist:
                return Response("{'Error':'No Pago'}",status=status.HTTP_409_CONFLICT)

            fecha_inicio_pago = pago.fecha_pago
            fecha_fin_pago = pago.fecha_expiracion

            if pago.numero_de_meses > 1:
                fecha_fin_pago = fecha_inicio_pago + relativedelta( months=+1) - relativedelta( days=+1)
                while not( fecha_inicio_pago <= fecha_sala and fecha_fin_pago >= fecha_sala ):
                    fecha_inicio_pago = fecha_fin_pago + relativedelta( days=+1)
                    fecha_fin_pago = fecha_inicio_pago + relativedelta( months=+1)
                    if fecha_fin_pago <> pago.fecha_expiracion:
                        fecha_fin_pago = fecha_fin_pago - relativedelta( days=+1)

            fecha_fin_pago = fecha_fin_pago + datetime.timedelta( hours=23,minutes=59,seconds=59)
            total_horas_sala = fecha_fin_res - fecha_inicio_res
            horas_sala = Sala.objects.filter( fecha_inicio__range=[fecha_inicio_pago,fecha_fin_pago])
            for sala in horas_sala:
                total_horas_sala += sala.fecha_fin - sala.fecha_inicio

            if total_horas_sala > total_hours:
                return Response("{'Error':'No Hours'}",status=status.HTTP_409_CONFLICT)

        serializer = SalaSerializer(data={'user':data['user'],'description':data['description'],'fecha_inicio':data['fecha_inicio'],'fecha_fin':data['fecha_fin']})
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data,status=201)
        else:
            return Response(serializer.errors,status=400)

    def put( self, request, format=None):
        data = request.DATA.copy()
        data['user'] = request.user.id
        if not data.get('id') or not data.get('fecha') or not data.get('hora_inicio') or not data.get('hora_fin'):
            return Response("{'Error':'Missing Data'}",status=status.HTTP_409_CONFLICT)

        try:
            reserv = Sala.objects.get(pk=data['id'])
        except Sala.DoesNotExist:
            return Response("{'Error':'Not Exists'}",status=status.HTTP_409_CONFLICT)

        data['fecha_inicio'] = data['fecha']+' '+data['hora_inicio']
        data['fecha_fin'] = data['fecha']+' '+data['hora_fin']


        #Overlap Check
        fecha_inicio_res = datetime.datetime.strptime( data['fecha_inicio'],'%Y-%m-%d %H:%M')
        fecha_fin_res = datetime.datetime.strptime( data['fecha_fin'],'%Y-%m-%d %H:%M' )


        if fecha_inicio_res >= fecha_fin_res:
            return Response("{'error':'check times'}",status=status.HTTP_409_CONFLICT)

        overlap_check = Sala.objects.filter( Q(user_id=data['user']) , Q(fecha_inicio__range=[fecha_inicio_res,fecha_fin_res]) | Q(fecha_inicio__lte=fecha_inicio_res,fecha_fin__gte=fecha_inicio_res) )


        if overlap_check:
            for ov_chk in overlap_check:
                if ov_chk.id != reserv.id:
                    return Response("{'overlap':'true'}",status=status.HTTP_409_CONFLICT)

        now = datetime.datetime.now()
        if now > reserv.fecha_inicio:
            return Response("{'Error':'El tiempo para modificar este registro a expirado'}",status=status.HTTP_409_CONFLICT)

        if not request.user.is_superuser:
            if data['user'] != reserv.user_id:
                return Response("{'Error':'UNAUTHORIZED'}",status=status.HTTP_401_UNAUTHORIZED)

            try:
                hours = MyProfile.objects.get(user_id=data['user'])
            except MyProfile.DoesNotExist:
                return Response("{'Error':'No Profile'}",status=status.HTTP_409_CONFLICT)

            total_hours = datetime.timedelta(hours = hours.horas_sala)

            fecha_sala = datetime.date( year=fecha_inicio_res.year, month=fecha_inicio_res.month, day=fecha_inicio_res.day)

            try:
                pago = Pago.objects.get( fecha_pago__lte=fecha_sala , fecha_expiracion__gte=fecha_sala)
            except Pago.DoesNotExist:
                return Response("{'Error':'No Pago'}",status=status.HTTP_409_CONFLICT)

            fecha_inicio_pago = pago.fecha_pago
            fecha_fin_pago = pago.fecha_expiracion

            if pago.numero_de_meses > 1:
                fecha_fin_pago = fecha_inicio_pago + relativedelta( months=+1) - relativedelta( days=+1)
                while not( fecha_inicio_pago <= fecha_sala and fecha_fin_pago >= fecha_sala ):
                    fecha_inicio_pago = fecha_fin_pago + relativedelta( days=+1)
                    fecha_fin_pago = fecha_inicio_pago + relativedelta( months=+1)
                    if fecha_fin_pago <> pago.fecha_expiracion:
                       fecha_fin_pago = fecha_fin_pago - relativedelta( days=+1)

            fecha_fin_pago = fecha_fin_pago + datetime.timedelta( hours=23,minutes=59,seconds=59)
            total_horas_sala = fecha_fin_res - fecha_inicio_res
            horas_sala = Sala.objects.filter( fecha_inicio__range=[fecha_inicio_pago,fecha_fin_pago])

            for sala in horas_sala:
                if sala.id != reserv.id: 
                    total_horas_sala += sala.fecha_fin - sala.fecha_inicio

            if total_horas_sala > total_hours:
                return Response("{'Error':'No Hours'}",status=status.HTTP_409_CONFLICT)

        serializer = SalaSerializer(reserv,data={'user':data['user'],'description':data['description'],'fecha_inicio':data['fecha_inicio'],'fecha_fin':data['fecha_fin']})
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        else:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def get(self , request, format=None):
        data = request.GET.copy()
        data['user'] = request.user.id
        print data
        if not data.get('id'):
            return Response("{'Error':'Missing Data'}",status=status.HTTP_409_CONFLICT)

        try:
            reserv = Sala.objects.get(pk=data['id'])
        except Sala.DoesNotExist:
            return Response("{'Error':'Not Exists'}",status=status.HTTP_409_CONFLICT)

        if not request.user.is_superuser:
            if data['user'] != reserv.user_id:
                return Response("{'Error':'UNAUTHORIZED'}",status=status.HTTP_401_UNAUTHORIZED)

        serializer = SalaSerializer(reserv)
        return Response(serializer.data)

@login_required      
def show_reserv_sala(request, id):
    try:
        reserv = Sala.objects.get(pk=id)
    except Sala.DoesNotExist:
        return redirect('/reservar/sala')

    now = datetime.datetime.now()

    if now > reserv.fecha_inicio:
       return redirect('/reservar/sala')

    if not request.user.is_superuser:
            if request.user.id != reserv.user_id:
                return redirect('/reservar/sala')

    print reserv.fecha_inicio.time()
    print datetime.datetime.now()
    return render( request,'updatesalaform.html',{'id':id,'fecha':str(reserv.fecha_inicio.date()),'description':reserv.description,'hora_inicio':str(reserv.fecha_inicio.time()),'hora_fin':str(reserv.fecha_fin.time())})

    

def submit_reserv_sala(request):
    
    user = request.user

    if request.method == 'POST':
        response_dict = {'ok': False, 'msg': None, 'err': None,}
        form = Salaform(request.POST)
   
        print request.POST
        print 'justo antes de la vida'
        if form.is_valid():
            sala = Sala()
            sala.user = user.id
            sala.description = form.clean_data['descripcion']
            sala.fecha_inicio = form.clean_data['fecha'] + ' ' + form.clean_data['hora_inicio']
            sala.fecha_fin = form.clean_data['fecha'] + ' ' + form.clean_data['hora_fin']
            print sala

            sala.save()
            response_dict['ok'] = True
        else:
            print 'con errores!'
            print form.errors
            errores = {}
            errores.update(form.errors)
            for field in errores:
                errores[field] = [unicode(error) for error in errores[field]]

            response_dict['msg'] = 'Los datos proporcionados son invalidos'
            response_dict['err'] = errores

        return HttpResponse(simplejson.dumps(response_dict), mimetype='application/json')
    return HttpResponseBadRequest()

@login_required
def reserv_sala(request):
    return render( request,'res_sala.html')

class JSONResponse(HttpResponse):
    """
    An HttpResponse that renders it's content into JSON.
    """
    def __init__(self, data, **kwargs):
        content = JSONRenderer().render(data)
        kwargs['content_type'] = 'application/json'
        super(JSONResponse, self).__init__(content, **kwargs)

class listreservas(APIView):
    authentication_classes = (authentication.SessionAuthentication,authentication.TokenAuthentication,)
    permission_classes = (permissions.IsAuthenticated,)

    def get(self, request, format=None):
        get_param =  request.GET.copy()
        try:
            start_timestamp = int(get_param.get('start', False))
            end_timestamp = int(get_param .get('end', False))
            start_date = datetime.datetime.fromtimestamp(start_timestamp)
            end_date = datetime.datetime.fromtimestamp(end_timestamp)
        except ValueError:
            start_date = datetime.date.today()
            end_date = datetime.datetime.today() + datetime.timedelta(days=7)

        reserv_list = Sala.objects.filter(fecha_inicio__gte=start_date,fecha_fin__lte=end_date)

        s = []
        for res in reserv_list:
            print str(res.id)."hola"
            if not request.user.is_superuser:
                if request.user.id != res.user_id:
                    s.append({'id':res.id,'title':res.description,'start':str(res.fecha_inicio),'end':str(res.fecha_fin),'allDay':False})
                else:
                    now = datetime.datetime.now()
                    if now > res.fecha_inicio:
                        s.append({'id':res.id,'title':res.description,'start':str(res.fecha_inicio),'end':str(res.fecha_fin),'allDay':False})
                    else:
                        s.append({'id':res.id,'title':res.description,'start':str(res.fecha_inicio),'end':str(res.fecha_fin),'allDay':False,'url':'http://'.join[request.META['HTTP_HOST'],'/reservar/show/',res.id]})
            else:
                now = datetime.datetime.now()
                if now > res.fecha_inicio:
                    s.append({'id':res.id,'title':res.description,'start':str(res.fecha_inicio),'end':str(res.fecha_fin),'allDay':False})
                else:
                    s.append({'id':res.id,'title':res.description,'start':str(res.fecha_inicio),'end':str(res.fecha_fin),'allDay':False,'url':"/reservar/show/".res.id.read()})

        return JSONResponse(s)
